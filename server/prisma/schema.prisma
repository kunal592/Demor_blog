generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  bio       String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blogs                 Blog[]
  likes                 Like[]
  bookmarks             Bookmark[]
  followers             Follows[]      @relation("followers")
  following             Follows[]      @relation("following")
  comments              Comment[]
  sentNotifications     Notification[] @relation("sentNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?    // short description
  summary     String?    // AI-generated summary
  coverImage  String?    // blog cover image
  tags        String[]   @default([])

  isPublished Boolean   @default(false) // ✅ draft vs published
  isFeatured  Boolean   @default(false) // ✅ admin can feature blogs
  readTime    Int?      // estimated reading time
  viewCount   Int       @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes     Like[]
  bookmarks Bookmark[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Follows {
  followerId  String
  followingId String

  follower  User @relation("followers", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  senderId    String
  recipientId String

  sender    User @relation("sentNotifications", fields: [senderId], references: [id])
  recipient User @relation("receivedNotifications", fields: [recipientId], references: [id])
}

enum Role {
  USER
  ADMIN
}
