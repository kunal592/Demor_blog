
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String?
  avatar      String?
  bio         String?
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  blogs       Blog[]
  likes       Like[]
  bookmarks   Bookmark[]
  comments    Comment[]
  sessions    Session[]
  sentNotifications Notification[] @relation("sentNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")
  following   Follows[] @relation("following")
  followers   Follows[] @relation("followers")

  @@map("users")
}

model Follows {
  followerId String
  followingId String
  follower    User   @relation("following", fields: [followerId], references: [id])
  following   User   @relation("followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("sessions")
}

model Blog {
  id           String     @id @default(uuid())
  title        String
  slug         String     @unique
  content      String
  excerpt      String?
  summary      String?
  coverImage   String?
  tags         String[]
  isPublished  Boolean    @default(false)
  isFeatured   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  viewCount    Int        @default(0)
  readTime     Int        @default(0)
  likes        Like[]
  bookmarks    Bookmark[]
  comments     Comment[]

  @@map("blogs")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  createdAt DateTime @default(now())

  @@unique([userId, blogId])
  @@map("bookmarks")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  parentId  String?
  parent    Comment? @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("replies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Notification {
  id          String   @id @default(uuid())
  type        String // e.g., 'like', 'comment', 'follow'
  sender      User     @relation("sentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  recipient   User     @relation("receivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  blogId      String?  // Optional, for like/comment notifications
  commentId   String?  // Optional, for comment notifications
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

enum Role {
  USER
  ADMIN
}
